{"ast":null,"code":"import axios from 'axios';\nimport { API_BASE_URL } from '@/config';\nexport default {\n  // data() {\n  //     return {\n  //         currentPriceFrom: null,\n  //         currentPriceTo: null,\n  //         currentCategoryId: null,\n  //         currentColorId: [],\n  //         currentPropId: [],\n  //         currentPropName: null,\n\n  //         categoriesData: null,\n  //         categoryData: null,\n  //         colorsData: [],\n  //         propsData: []\n  //     }\n  // },\n  // props: ['priceFrom', 'priceTo', 'categoryId', 'colorId', 'propId', 'propName'],\n  // computed: {\n  //     categories() {\n  //         return this.categoriesData ? this.categoriesData.items : [];\n  //     },\n  //     category() {\n  //         return this.categoryData ? this.categoryData.productProps[0] : [];\n  //     },\n  //     colors() {\n  //         return this.colorsData ? this.colorsData.items : [];\n  //     }\n  // },\n  // watch: {\n  //     priceFrom(value) {\n  //         this.currentPriceFrom = value;\n  //     },\n  //     priceTo(value) {\n  //         this.currentPriceTo = value;\n  //     },\n  //     categoryId(value) {\n  //         this.currentCategoryId = value;\n  //     },\n  //     colorId(value) {\n  //         this.currentColorId = value;\n  //     },\n  //     propId(value) {\n  //         this.currentPropId = value;\n  //     },\n  //     currentCategoryId: function () {\n  //         this.categoryData = null;\n  //         if (this.currentCategoryId > 0) {\n  //             axios\n  //                 .get(API_BASE_URL + \"/api/productCategories/\" + this.currentCategoryId)\n  //                 .then(response => (this.categoryData = response.data))\n  //                 .then(\n  //                     () =>\n  //                     (this.currentPropName =\n  //                         this.categoryData.productProps.length > 0\n  //                             ? this.categoryData.productProps[0].code\n  //                             : null)\n  //                 )\n  //                 .then(() => (this.currentPropId = []))\n  //                 .then(() => (this.currentColorId = []));\n  //         }\n  //     }\n  // },\n  // methods: {\n  //     submit() {\n  //         this.$emit('update:priceFrom', this.currentPriceFrom);\n  //         this.$emit('update:priceTo', this.currentPriceTo);\n  //         this.$emit('update:categoryId', this.currentCategoryId);\n  //         this.$emit('update:colorId', this.currentColorId);\n  //         this.$emit(\"update:propId\", this.currentPropId);\n  //         this.$emit(\"update:propName\", this.currentPropName);\n  //     },\n  //     reset() {\n  //         this.$emit(\"update:priceFrom\", null);\n  //         this.$emit(\"update:priceTo\", null);\n  //         this.$emit(\"update:categoryId\", 0);\n  //         this.$emit(\"update:propId\", []);\n  //         this.$emit(\"update:colorId\", []);\n  //         this.currentCategoryId = 0;\n  //     },\n  //     loadCategories() {\n  //         axios.get(API_BASE_URL + '/api/productCategories')\n  //             .then(response => this.categoriesData = response.data);\n  //     },\n  //     loadColors() {\n  //         axios.get(API_BASE_URL + '/api/colors')\n  //             .then(response => this.colorsData = response.data);\n  //     },\n  //     submitCategory() {\n  //         this.currentCategoryId = this.categoryId;\n  //     }\n  // },\n  // created() {\n  //     this.loadCategories();\n  //     this.loadColors();\n  //     this.submitCategory();\n  // }\n};","map":{"version":3,"names":["axios","API_BASE_URL"],"sources":["src/components/ProductFilter.vue"],"sourcesContent":["<template>\n    <aside class=\"filter\">\n        <h2 class=\"filter__title\">Фильтры</h2>\n\n        <form class=\"filter__form form\" action=\"#\" method=\"get\" @submit.prevent=\"submit\">\n            <fieldset class=\"form__block\">\n                <legend class=\"form__legend\">Цена</legend>\n                <label class=\"form__label form__label--price\" for=\"filter-from\">\n                    <input class=\"form__input\" type=\"text\" name=\"min-price\" v-model.number=\"currentPriceFrom\"\n                        id=\"filter-from\">\n                    <span class=\"form__value\">От</span>\n                </label>\n                <label class=\"form__label form__label--price\" for=\"filter-to\">\n                    <input class=\"form__input\" type=\"text\" name=\"max-price\" v-model.number=\"currentPriceTo\" id=\"filter-to\">\n                    <span class=\"form__value\">До</span>\n                </label>\n            </fieldset>\n\n            <fieldset class=\"form__block\">\n                <legend class=\"form__legend\">Категория</legend>\n                <label class=\"form__label form__label--select\">\n                    <select class=\"form__select\" type=\"text\" name=\"category\" v-model=\"currentCategoryId\" id=\"category\">\n                        <option value=\"0\">Все категории</option>\n                        <option :value=\"category.id\" v-for=\"category in categories\" :key=\"category.id\">{{ category.title }}\n                        </option>\n                    </select>\n                </label>\n            </fieldset>\n\n            <!-- <fieldset class=\"form__block\" v-if=\"currentCategoryId > 0 && propName != 'color'\">\n                <legend class=\"form__legend\">Цвет</legend>\n                <ul class=\"colors\">\n                    <li class=\"colors__item\" v-for=\"color in colors\" :key=\"color.title + color.id\">\n                        <label class=\"colors__label\">\n                            <input class=\"colors__radio sr-only\" type=\"checkbox\" name=\"color\" :value=\"color.id\"\n                                v-model=\"currentColorId\">\n                            <span class=\"colors__value\" :style=\"{ 'background-color': color.code }\">\n                            </span>\n                        </label>\n                    </li>\n                </ul>\n            </fieldset>\n\n            <fieldset class=\"form__block\" v-if=\"currentCategoryId > 0 && category\">\n                <legend class=\"form__legend\">{{ category.title }}</legend>\n                <ul class=\"check-list\">\n                    <li class=\"check-list__item\" v-for=\"(item, index) in category.availableValues\" :key=\"index\">\n                        <label class=\"check-list__label\">\n                            <input class=\"check-list__check sr-only\" type=\"checkbox\" name=\"volume\" :value=\"item.value\"\n                                v-model=\"currentPropId\" :checked=\"index === 0\" />\n                            <span class=\"check-list__desc\">\n                                {{ item.value }}\n                                <span>({{ item.productsCount }})</span>\n                            </span>\n                        </label>\n                    </li>\n                </ul>\n            </fieldset> -->\n            <fieldset class=\"form__block\">\n                <legend class=\"form__legend\">{{ currentCategoryMainProp }}</legend>\n                <ul class=\"check-list\">\n                    <li class=\"check-list__item\" v-for=\"(elem, index) in currentCategoryData\" :key=\"index\">\n                        <label class=\"check-list__label\" :for=\"`check-list-${elem.value}`\">\n                            <input :id=\"`check-list-${elem.value}`\" class=\"check-list__check sr-only\" type=\"checkbox\"\n                                name=\"volume\" :value=\"elem.value\" @input=\"skuClick(elem.value)\">\n                            <span class=\"check-list__desc\">\n                                {{ elem.value }}\n                                <span>({{ elem.productsCount }})</span>\n                            </span>\n                        </label>\n                    </li>\n                </ul>\n            </fieldset>\n\n            <button class=\"filter__submit button button--primery\" type=\"submit\">\n                Применить\n            </button>\n            <!-- <button class=\"filter__reset button button--second\" type=\"button\" @click.prevent=\"reset\" v-if=\"currentPriceFrom ||\n                currentPriceTo ||\n                currentCategoryId ||\n                currentColorId.length > 1 ||\n                currentPropId.length > 1\n                \">\n                Сбросить\n            </button> -->\n            <button class=\"filter__reset button button--second\" type=\"button\" @click.prevent=\"reset\"\n                v-show=\"categoryId !== 0 || priceTo !== 0 || priceFrom !== 0\">\n                Сбросить\n            </button>\n        </form>\n    </aside>\n</template>\n\n<script>\nimport axios from 'axios';\nimport { API_BASE_URL } from '@/config';\n\nexport default {\n    // data() {\n    //     return {\n    //         currentPriceFrom: null,\n    //         currentPriceTo: null,\n    //         currentCategoryId: null,\n    //         currentColorId: [],\n    //         currentPropId: [],\n    //         currentPropName: null,\n\n    //         categoriesData: null,\n    //         categoryData: null,\n    //         colorsData: [],\n    //         propsData: []\n    //     }\n    // },\n    // props: ['priceFrom', 'priceTo', 'categoryId', 'colorId', 'propId', 'propName'],\n    // computed: {\n    //     categories() {\n    //         return this.categoriesData ? this.categoriesData.items : [];\n    //     },\n    //     category() {\n    //         return this.categoryData ? this.categoryData.productProps[0] : [];\n    //     },\n    //     colors() {\n    //         return this.colorsData ? this.colorsData.items : [];\n    //     }\n    // },\n    // watch: {\n    //     priceFrom(value) {\n    //         this.currentPriceFrom = value;\n    //     },\n    //     priceTo(value) {\n    //         this.currentPriceTo = value;\n    //     },\n    //     categoryId(value) {\n    //         this.currentCategoryId = value;\n    //     },\n    //     colorId(value) {\n    //         this.currentColorId = value;\n    //     },\n    //     propId(value) {\n    //         this.currentPropId = value;\n    //     },\n    //     currentCategoryId: function () {\n    //         this.categoryData = null;\n    //         if (this.currentCategoryId > 0) {\n    //             axios\n    //                 .get(API_BASE_URL + \"/api/productCategories/\" + this.currentCategoryId)\n    //                 .then(response => (this.categoryData = response.data))\n    //                 .then(\n    //                     () =>\n    //                     (this.currentPropName =\n    //                         this.categoryData.productProps.length > 0\n    //                             ? this.categoryData.productProps[0].code\n    //                             : null)\n    //                 )\n    //                 .then(() => (this.currentPropId = []))\n    //                 .then(() => (this.currentColorId = []));\n    //         }\n    //     }\n    // },\n    // methods: {\n    //     submit() {\n    //         this.$emit('update:priceFrom', this.currentPriceFrom);\n    //         this.$emit('update:priceTo', this.currentPriceTo);\n    //         this.$emit('update:categoryId', this.currentCategoryId);\n    //         this.$emit('update:colorId', this.currentColorId);\n    //         this.$emit(\"update:propId\", this.currentPropId);\n    //         this.$emit(\"update:propName\", this.currentPropName);\n    //     },\n    //     reset() {\n    //         this.$emit(\"update:priceFrom\", null);\n    //         this.$emit(\"update:priceTo\", null);\n    //         this.$emit(\"update:categoryId\", 0);\n    //         this.$emit(\"update:propId\", []);\n    //         this.$emit(\"update:colorId\", []);\n    //         this.currentCategoryId = 0;\n    //     },\n    //     loadCategories() {\n    //         axios.get(API_BASE_URL + '/api/productCategories')\n    //             .then(response => this.categoriesData = response.data);\n    //     },\n    //     loadColors() {\n    //         axios.get(API_BASE_URL + '/api/colors')\n    //             .then(response => this.colorsData = response.data);\n    //     },\n    //     submitCategory() {\n    //         this.currentCategoryId = this.categoryId;\n    //     }\n    // },\n    // created() {\n    //     this.loadCategories();\n    //     this.loadColors();\n    //     this.submitCategory();\n    // }\n}\n</script>"],"mappings":"AA8FA,OAAAA,KAAA;AACA,SAAAC,YAAA;AAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AAAA,CACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}