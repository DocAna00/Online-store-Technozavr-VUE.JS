{"ast":null,"code":"import \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.array.find-index.js\";\nimport axios from 'axios';\nimport { API_BASE_URL } from '@/config';\nexport default {\n  // data() {\n  //     return {\n  //         currentPriceFrom: null,\n  //         currentPriceTo: null,\n  //         currentCategoryId: null,\n  //         currentColorId: [],\n  //         currentPropId: [],\n  //         currentPropName: null,\n  //         categoriesData: null,\n  //         categoryData: null,\n  //         colorsData: [],\n  //         propsData: []\n  //     }\n  // },\n  // props: ['priceFrom', 'priceTo', 'categoryId', 'colorId', 'propId', 'propName'],\n  // computed: {\n  //     categories() {\n  //         return this.categoriesData ? this.categoriesData.items : [];\n  //     },\n  //     category() {\n  //         return this.categoryData ? this.categoryData.productProps[0] : [];\n  //     },\n  //     colors() {\n  //         return this.colorsData ? this.colorsData.items : [];\n  //     }\n  // },\n  // watch: {\n  //     priceFrom(value) {\n  //         this.currentPriceFrom = value;\n  //     },\n  //     priceTo(value) {\n  //         this.currentPriceTo = value;\n  //     },\n  //     categoryId(value) {\n  //         this.currentCategoryId = value;\n  //     },\n  //     colorId(value) {\n  //         this.currentColorId = value;\n  //     },\n  //     propId(value) {\n  //         this.currentPropId = value;\n  //     },\n  //     currentCategoryId: function () {\n  //         this.categoryData = null;\n  //         if (this.currentCategoryId > 0) {\n  //             axios\n  //                 .get(API_BASE_URL + \"/api/productCategories/\" + this.currentCategoryId)\n  //                 .then(response => (this.categoryData = response.data))\n  //                 .then(\n  //                     () =>\n  //                     (this.currentPropName =\n  //                         this.categoryData.productProps.length > 0\n  //                             ? this.categoryData.productProps[0].code\n  //                             : null)\n  //                 )\n  //                 .then(() => (this.currentPropId = []))\n  //                 .then(() => (this.currentColorId = []));\n  //         }\n  //     }\n  // },\n  // methods: {\n  //     submit() {\n  //         this.$emit('update:priceFrom', this.currentPriceFrom);\n  //         this.$emit('update:priceTo', this.currentPriceTo);\n  //         this.$emit('update:categoryId', this.currentCategoryId);\n  //         this.$emit('update:colorId', this.currentColorId);\n  //         this.$emit(\"update:propId\", this.currentPropId);\n  //         this.$emit(\"update:propName\", this.currentPropName);\n  //     },\n  //     reset() {\n  //         this.$emit(\"update:priceFrom\", null);\n  //         this.$emit(\"update:priceTo\", null);\n  //         this.$emit(\"update:categoryId\", 0);\n  //         this.$emit(\"update:propId\", []);\n  //         this.$emit(\"update:colorId\", []);\n  //         this.currentCategoryId = 0;\n  //     },\n  //     loadCategories() {\n  //         axios.get(API_BASE_URL + '/api/productCategories')\n  //             .then(response => this.categoriesData = response.data);\n  //     },\n  //     loadColors() {\n  //         axios.get(API_BASE_URL + '/api/colors')\n  //             .then(response => this.colorsData = response.data);\n  //     },\n  //     submitCategory() {\n  //         this.currentCategoryId = this.categoryId;\n  //     }\n  // },\n  // created() {\n  //     this.loadCategories();\n  //     this.loadColors();\n  //     this.submitCategory();\n  // }\n  data: function data() {\n    return {\n      currentPriceFrom: 0,\n      currentPriceTo: 0,\n      currentCategoryId: 0,\n      currentSku: [],\n      currentCategoryMainProp: '',\n      currentCategoryMainPropSlug: '',\n      currentCategoryData: [],\n      categoriesData: []\n    };\n  },\n  props: ['priceFrom', 'priceTo', 'categoryId', 'categoryMainPropSlug', 'sku'],\n  computed: {\n    // Все категории\n    categories: function categories() {\n      return this.categoriesData ? this.categoriesData.items : [];\n    },\n    // Выбранная (текущая) категория\n    currentСategory: {\n      get: function get() {\n        return this.categoryId;\n      },\n      set: function set(value) {\n        return value;\n      }\n    }\n  },\n  watch: {\n    priceFrom: function priceFrom(value) {\n      this.currentPriceFrom = value;\n    },\n    priceTo: function priceTo(value) {\n      this.currentPriceTo = value;\n    },\n    categoryId: function categoryId(value) {\n      if (value !== 0) this.loadCategoryIdData(value);\n    },\n    categoryMainPropSlug: function categoryMainPropSlug(value) {\n      this.currentCategoryMainPropSlug = value;\n    },\n    sku: function sku(value) {\n      this.currentSku = value;\n    }\n  },\n  methods: {\n    submit: function submit() {\n      this.$emit('loadProductsByFilters');\n    },\n    reset: function reset() {\n      this.$emit('resetFilters');\n      this.currentCategoryMainProp = '';\n      this.currentCategoryMainPropSlug = '';\n      this.currentCategoryData = [];\n    },\n    // Загружаем список категорий\n    loadCategories: function loadCategories() {\n      var _this = this;\n      axios.get(\"\".concat(API_BASE_URL, \"/api/productCategories\")).then(function (response) {\n        _this.categoriesData = response.data;\n      });\n    },\n    // Загружаем SKU данные\n    loadCategoryIdData: function loadCategoryIdData(id) {\n      var _this2 = this;\n      axios.get(\"\".concat(API_BASE_URL, \"/api/productCategories/\").concat(id)).then(function (response) {\n        _this2.currentCategoryData = response.data.productProps[0].availableValues;\n        _this2.currentCategoryMainProp = response.data.productProps[0].title;\n        // Двусторонняя привязка\n        _this2.$emit('update:categoryMainPropSlug', response.data.productProps[0].code);\n      });\n    },\n    // Поведение при выборе категории\n    filterByCategoryClick: function filterByCategoryClick(e) {\n      this.$emit('update:categoryId', Number(e));\n    },\n    // Поведение при кликах на фильтрах SKU\n    skuClick: function skuClick(e) {\n      // Для удобства\n      var arr = this.currentSku;\n      // Если в массиве нет элемента со значением е, то добавляем его\n      if (!arr.includes(e)) arr.push(e);\n      // А если еть, то удаляем\n      else arr.splice(arr.findIndex(function (el) {\n        return el === e;\n      }), 1);\n      // Двусторонняя привязка\n      this.$emit('update:sku', this.currentSku);\n    },\n    // Поведение при вводе цены от\n    priceFromClick: function priceFromClick(e) {\n      this.$emit('update:priceFrom', Number(e));\n    },\n    // Поведение при вводе цены до\n    priceToClick: function priceToClick(e) {\n      this.$emit('update:priceTo', Number(e));\n    }\n  },\n  created: function created() {\n    this.loadCategories();\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","data","currentPriceFrom","currentPriceTo","currentCategoryId","currentSku","currentCategoryMainProp","currentCategoryMainPropSlug","currentCategoryData","categoriesData","props","computed","categories","items","currentСategory","get","categoryId","set","value","watch","priceFrom","priceTo","loadCategoryIdData","categoryMainPropSlug","sku","methods","submit","$emit","reset","loadCategories","_this","concat","then","response","id","_this2","productProps","availableValues","title","code","filterByCategoryClick","e","Number","skuClick","arr","includes","push","splice","findIndex","el","priceFromClick","priceToClick","created"],"sources":["src/components/ProductFilter.vue"],"sourcesContent":["<template>\n    <aside class=\"filter\">\n        <h2 class=\"filter__title\">Фильтры</h2>\n\n        <form class=\"filter__form form\" action=\"#\" method=\"get\" @submit.prevent=\"submit\">\n            <fieldset class=\"form__block\">\n                <legend class=\"form__legend\">Цена</legend>\n                <label class=\"form__label form__label--price\" for=\"filter-from\">\n                    <input class=\"form__input\" type=\"text\" name=\"min-price\" v-model.number=\"currentPriceFrom\"\n                        id=\"filter-from\">\n                    <span class=\"form__value\">От</span>\n                </label>\n                <label class=\"form__label form__label--price\" for=\"filter-to\">\n                    <input class=\"form__input\" type=\"text\" name=\"max-price\" v-model.number=\"currentPriceTo\" id=\"filter-to\">\n                    <span class=\"form__value\">До</span>\n                </label>\n            </fieldset>\n\n            <fieldset class=\"form__block\">\n                <legend class=\"form__legend\">Категория</legend>\n                <label class=\"form__label form__label--select\">\n                    <select class=\"form__select\" type=\"text\" name=\"category\" v-model=\"currentCategoryId\" id=\"category\">\n                        <option value=\"0\">Все категории</option>\n                        <option :value=\"category.id\" v-for=\"category in categories\" :key=\"category.id\">{{ category.title }}\n                        </option>\n                    </select>\n                </label>\n            </fieldset>\n\n            <!-- <fieldset class=\"form__block\" v-if=\"currentCategoryId > 0 && propName != 'color'\">\n                <legend class=\"form__legend\">Цвет</legend>\n                <ul class=\"colors\">\n                    <li class=\"colors__item\" v-for=\"color in colors\" :key=\"color.title + color.id\">\n                        <label class=\"colors__label\">\n                            <input class=\"colors__radio sr-only\" type=\"checkbox\" name=\"color\" :value=\"color.id\"\n                                v-model=\"currentColorId\">\n                            <span class=\"colors__value\" :style=\"{ 'background-color': color.code }\">\n                            </span>\n                        </label>\n                    </li>\n                </ul>\n            </fieldset>\n\n            <fieldset class=\"form__block\" v-if=\"currentCategoryId > 0 && category\">\n                <legend class=\"form__legend\">{{ category.title }}</legend>\n                <ul class=\"check-list\">\n                    <li class=\"check-list__item\" v-for=\"(item, index) in category.availableValues\" :key=\"index\">\n                        <label class=\"check-list__label\">\n                            <input class=\"check-list__check sr-only\" type=\"checkbox\" name=\"volume\" :value=\"item.value\"\n                                v-model=\"currentPropId\" :checked=\"index === 0\" />\n                            <span class=\"check-list__desc\">\n                                {{ item.value }}\n                                <span>({{ item.productsCount }})</span>\n                            </span>\n                        </label>\n                    </li>\n                </ul>\n            </fieldset> -->\n            <fieldset class=\"form__block\">\n                <legend class=\"form__legend\">{{ currentCategoryMainProp }}</legend>\n                <ul class=\"check-list\">\n                    <li class=\"check-list__item\" v-for=\"(elem, index) in currentCategoryData\" :key=\"index\">\n                        <label class=\"check-list__label\" :for=\"`check-list-${elem.value}`\">\n                            <input :id=\"`check-list-${elem.value}`\" class=\"check-list__check sr-only\" type=\"checkbox\"\n                                name=\"volume\" :value=\"elem.value\" @input=\"skuClick(elem.value)\">\n                            <span class=\"check-list__desc\">\n                                {{ elem.value }}\n                                <span>({{ elem.productsCount }})</span>\n                            </span>\n                        </label>\n                    </li>\n                </ul>\n            </fieldset>\n\n            <button class=\"filter__submit button button--primery\" type=\"submit\">\n                Применить\n            </button>\n            <!-- <button class=\"filter__reset button button--second\" type=\"button\" @click.prevent=\"reset\" v-if=\"currentPriceFrom ||\n                currentPriceTo ||\n                currentCategoryId ||\n                currentColorId.length > 1 ||\n                currentPropId.length > 1\n                \">\n                Сбросить\n            </button> -->\n            <button class=\"filter__reset button button--second\" type=\"button\" @click.prevent=\"reset\"\n                v-show=\"categoryId !== 0 || priceTo !== 0 || priceFrom !== 0\">\n                Сбросить\n            </button>\n        </form>\n    </aside>\n</template>\n\n<script>\nimport axios from 'axios';\nimport { API_BASE_URL } from '@/config';\n\nexport default {\n    // data() {\n    //     return {\n    //         currentPriceFrom: null,\n    //         currentPriceTo: null,\n    //         currentCategoryId: null,\n    //         currentColorId: [],\n    //         currentPropId: [],\n    //         currentPropName: null,\n\n    //         categoriesData: null,\n    //         categoryData: null,\n    //         colorsData: [],\n    //         propsData: []\n    //     }\n    // },\n    // props: ['priceFrom', 'priceTo', 'categoryId', 'colorId', 'propId', 'propName'],\n    // computed: {\n    //     categories() {\n    //         return this.categoriesData ? this.categoriesData.items : [];\n    //     },\n    //     category() {\n    //         return this.categoryData ? this.categoryData.productProps[0] : [];\n    //     },\n    //     colors() {\n    //         return this.colorsData ? this.colorsData.items : [];\n    //     }\n    // },\n    // watch: {\n    //     priceFrom(value) {\n    //         this.currentPriceFrom = value;\n    //     },\n    //     priceTo(value) {\n    //         this.currentPriceTo = value;\n    //     },\n    //     categoryId(value) {\n    //         this.currentCategoryId = value;\n    //     },\n    //     colorId(value) {\n    //         this.currentColorId = value;\n    //     },\n    //     propId(value) {\n    //         this.currentPropId = value;\n    //     },\n    //     currentCategoryId: function () {\n    //         this.categoryData = null;\n    //         if (this.currentCategoryId > 0) {\n    //             axios\n    //                 .get(API_BASE_URL + \"/api/productCategories/\" + this.currentCategoryId)\n    //                 .then(response => (this.categoryData = response.data))\n    //                 .then(\n    //                     () =>\n    //                     (this.currentPropName =\n    //                         this.categoryData.productProps.length > 0\n    //                             ? this.categoryData.productProps[0].code\n    //                             : null)\n    //                 )\n    //                 .then(() => (this.currentPropId = []))\n    //                 .then(() => (this.currentColorId = []));\n    //         }\n    //     }\n    // },\n    // methods: {\n    //     submit() {\n    //         this.$emit('update:priceFrom', this.currentPriceFrom);\n    //         this.$emit('update:priceTo', this.currentPriceTo);\n    //         this.$emit('update:categoryId', this.currentCategoryId);\n    //         this.$emit('update:colorId', this.currentColorId);\n    //         this.$emit(\"update:propId\", this.currentPropId);\n    //         this.$emit(\"update:propName\", this.currentPropName);\n    //     },\n    //     reset() {\n    //         this.$emit(\"update:priceFrom\", null);\n    //         this.$emit(\"update:priceTo\", null);\n    //         this.$emit(\"update:categoryId\", 0);\n    //         this.$emit(\"update:propId\", []);\n    //         this.$emit(\"update:colorId\", []);\n    //         this.currentCategoryId = 0;\n    //     },\n    //     loadCategories() {\n    //         axios.get(API_BASE_URL + '/api/productCategories')\n    //             .then(response => this.categoriesData = response.data);\n    //     },\n    //     loadColors() {\n    //         axios.get(API_BASE_URL + '/api/colors')\n    //             .then(response => this.colorsData = response.data);\n    //     },\n    //     submitCategory() {\n    //         this.currentCategoryId = this.categoryId;\n    //     }\n    // },\n    // created() {\n    //     this.loadCategories();\n    //     this.loadColors();\n    //     this.submitCategory();\n    // }\n    data() {\n    return {\n      currentPriceFrom: 0,\n      currentPriceTo: 0,\n      currentCategoryId: 0,\n      currentSku: [],\n\n      currentCategoryMainProp: '',\n      currentCategoryMainPropSlug: '',\n      currentCategoryData: [],\n\n      categoriesData: [],\n    };\n  },\n  props: ['priceFrom', 'priceTo', 'categoryId', 'categoryMainPropSlug', 'sku'],\n  computed: {\n    // Все категории\n    categories() {\n      return this.categoriesData ? this.categoriesData.items : [];\n    },\n    // Выбранная (текущая) категория\n    currentСategory: {\n      get() {\n        return this.categoryId;\n      },\n      set(value) {\n        return value;\n      },\n    },\n  },\n  watch: {\n    priceFrom(value) {\n      this.currentPriceFrom = value;\n    },\n    priceTo(value) {\n      this.currentPriceTo = value;\n    },\n    categoryId(value) {\n      if (value !== 0) this.loadCategoryIdData(value);\n    },\n    categoryMainPropSlug(value) {\n      this.currentCategoryMainPropSlug = value;\n    },\n    sku(value) {\n      this.currentSku = value;\n    },\n  },\n  methods: {\n    submit() {\n      this.$emit('loadProductsByFilters');\n    },\n    reset() {\n      this.$emit('resetFilters');\n      this.currentCategoryMainProp = '';\n      this.currentCategoryMainPropSlug = '';\n      this.currentCategoryData = [];\n    },\n    // Загружаем список категорий\n    loadCategories() {\n      axios.get(`${API_BASE_URL}/api/productCategories`)\n        .then((response) => {\n          this.categoriesData = response.data;\n        });\n    },\n    // Загружаем SKU данные\n    loadCategoryIdData(id) {\n      axios.get(`${API_BASE_URL}/api/productCategories/${id}`)\n        .then((response) => {\n          this.currentCategoryData = response.data.productProps[0].availableValues;\n          this.currentCategoryMainProp = response.data.productProps[0].title;\n          // Двусторонняя привязка\n          this.$emit('update:categoryMainPropSlug', response.data.productProps[0].code);\n        });\n    },\n    // Поведение при выборе категории\n    filterByCategoryClick(e) {\n      this.$emit('update:categoryId', Number(e));\n    },\n    // Поведение при кликах на фильтрах SKU\n    skuClick(e) {\n      // Для удобства\n      const arr = this.currentSku;\n      // Если в массиве нет элемента со значением е, то добавляем его\n      if (!arr.includes(e)) arr.push(e);\n      // А если еть, то удаляем\n      else arr.splice(arr.findIndex((el) => el === e), 1);\n      // Двусторонняя привязка\n      this.$emit('update:sku', this.currentSku);\n    },\n    // Поведение при вводе цены от\n    priceFromClick(e) {\n      this.$emit('update:priceFrom', Number(e));\n    },\n    // Поведение при вводе цены до\n    priceToClick(e) {\n      this.$emit('update:priceTo', Number(e));\n    },\n  },\n  created() {\n    this.loadCategories();\n  },\n}\n</script>"],"mappings":";;;;;;;AA8FA,OAAAA,KAAA;AACA,SAAAC,YAAA;AAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACAC,IAAA,WAAAA,KAAA;IACA;MACAC,gBAAA;MACAC,cAAA;MACAC,iBAAA;MACAC,UAAA;MAEAC,uBAAA;MACAC,2BAAA;MACAC,mBAAA;MAEAC,cAAA;IACA;EACA;EACAC,KAAA;EACAC,QAAA;IACA;IACAC,UAAA,WAAAA,WAAA;MACA,YAAAH,cAAA,QAAAA,cAAA,CAAAI,KAAA;IACA;IACA;IACAC,eAAA;MACAC,GAAA,WAAAA,IAAA;QACA,YAAAC,UAAA;MACA;MACAC,GAAA,WAAAA,IAAAC,KAAA;QACA,OAAAA,KAAA;MACA;IACA;EACA;EACAC,KAAA;IACAC,SAAA,WAAAA,UAAAF,KAAA;MACA,KAAAhB,gBAAA,GAAAgB,KAAA;IACA;IACAG,OAAA,WAAAA,QAAAH,KAAA;MACA,KAAAf,cAAA,GAAAe,KAAA;IACA;IACAF,UAAA,WAAAA,WAAAE,KAAA;MACA,IAAAA,KAAA,aAAAI,kBAAA,CAAAJ,KAAA;IACA;IACAK,oBAAA,WAAAA,qBAAAL,KAAA;MACA,KAAAX,2BAAA,GAAAW,KAAA;IACA;IACAM,GAAA,WAAAA,IAAAN,KAAA;MACA,KAAAb,UAAA,GAAAa,KAAA;IACA;EACA;EACAO,OAAA;IACAC,MAAA,WAAAA,OAAA;MACA,KAAAC,KAAA;IACA;IACAC,KAAA,WAAAA,MAAA;MACA,KAAAD,KAAA;MACA,KAAArB,uBAAA;MACA,KAAAC,2BAAA;MACA,KAAAC,mBAAA;IACA;IACA;IACAqB,cAAA,WAAAA,eAAA;MAAA,IAAAC,KAAA;MACA/B,KAAA,CAAAgB,GAAA,IAAAgB,MAAA,CAAA/B,YAAA,6BACAgC,IAAA,WAAAC,QAAA;QACAH,KAAA,CAAArB,cAAA,GAAAwB,QAAA,CAAAhC,IAAA;MACA;IACA;IACA;IACAqB,kBAAA,WAAAA,mBAAAY,EAAA;MAAA,IAAAC,MAAA;MACApC,KAAA,CAAAgB,GAAA,IAAAgB,MAAA,CAAA/B,YAAA,6BAAA+B,MAAA,CAAAG,EAAA,GACAF,IAAA,WAAAC,QAAA;QACAE,MAAA,CAAA3B,mBAAA,GAAAyB,QAAA,CAAAhC,IAAA,CAAAmC,YAAA,IAAAC,eAAA;QACAF,MAAA,CAAA7B,uBAAA,GAAA2B,QAAA,CAAAhC,IAAA,CAAAmC,YAAA,IAAAE,KAAA;QACA;QACAH,MAAA,CAAAR,KAAA,gCAAAM,QAAA,CAAAhC,IAAA,CAAAmC,YAAA,IAAAG,IAAA;MACA;IACA;IACA;IACAC,qBAAA,WAAAA,sBAAAC,CAAA;MACA,KAAAd,KAAA,sBAAAe,MAAA,CAAAD,CAAA;IACA;IACA;IACAE,QAAA,WAAAA,SAAAF,CAAA;MACA;MACA,IAAAG,GAAA,QAAAvC,UAAA;MACA;MACA,KAAAuC,GAAA,CAAAC,QAAA,CAAAJ,CAAA,GAAAG,GAAA,CAAAE,IAAA,CAAAL,CAAA;MACA;MAAA,KACAG,GAAA,CAAAG,MAAA,CAAAH,GAAA,CAAAI,SAAA,WAAAC,EAAA;QAAA,OAAAA,EAAA,KAAAR,CAAA;MAAA;MACA;MACA,KAAAd,KAAA,oBAAAtB,UAAA;IACA;IACA;IACA6C,cAAA,WAAAA,eAAAT,CAAA;MACA,KAAAd,KAAA,qBAAAe,MAAA,CAAAD,CAAA;IACA;IACA;IACAU,YAAA,WAAAA,aAAAV,CAAA;MACA,KAAAd,KAAA,mBAAAe,MAAA,CAAAD,CAAA;IACA;EACA;EACAW,OAAA,WAAAA,QAAA;IACA,KAAAvB,cAAA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}