{"ast":null,"code":"import _objectSpread from \"/Users/anadoc/Desktop/Skillbox Anastasia/Skillbox Projects/vue-final-project/final_project_vue.js/project/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.timers.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport numberFormat from '@/helpers/numberFormat';\nimport BaseFormText from '@/components/BaseFormText.vue';\nimport BaseFormTextaera from '@/components/BaseFormTextaera.vue';\nimport { mapGetters, mapMutations } from 'vuex';\nimport axios from 'axios';\nimport { API_BASE_URL } from '@/config';\nexport default {\n  components: {\n    BaseFormText: BaseFormText,\n    BaseFormTextaera: BaseFormTextaera\n  },\n  data: function data() {\n    return {\n      formData: {\n        deliveryTypeId: null,\n        paymentTypeId: null\n      },\n      formError: {},\n      formErrorMessage: '',\n      productsLoading: false,\n      deliveriesData: [],\n      paymentsData: []\n    };\n  },\n  filters: {\n    numberFormat: numberFormat\n  },\n  computed: _objectSpread(_objectSpread({}, mapGetters({\n    products: 'cartDetailProducts',\n    totalPrice: 'cartTotalPrice'\n  })), {}, {\n    deliveryPrice: function deliveryPrice() {\n      var _this = this;\n      return this.formData.deliveryTypeId ? +this.deliveriesData.find(function (item) {\n        return item.id === _this.formData.deliveryTypeId;\n      }).price : 0;\n    }\n  }),\n  methods: _objectSpread(_objectSpread({}, mapMutations([\"updateDeliveryPrice\"])), {}, {\n    order: function order() {\n      var _this2 = this;\n      this.formError = {};\n      this.formErrorMessage = '';\n      this.productsLoading = true;\n      clearTimeout(this.loadProductsTimer);\n      this.loadProductsTimer = setTimeout(function () {\n        axios.post(API_BASE_URL + '/api/orders', _objectSpread({}, _this2.formData), {\n          params: {\n            userAccessKey: _this2.$store.state.userAccessKey\n          }\n        }).then(function (response) {\n          _this2.$store.commit('resetCart');\n          _this2.$store.commit('updateOrderInfo', response.data);\n          _this2.$router.push({\n            name: 'orderInfo',\n            params: {\n              id: response.data.id\n            }\n          });\n        })[\"catch\"](function (error) {\n          _this2.formError = error.response.data.error.request || {};\n          _this2.formErrorMessage = error.response.data.error.message;\n        }).then(function () {\n          return _this2.productsLoading = false;\n        });\n      }, 1000);\n    },\n    loadDeliveries: function loadDeliveries() {\n      var _this3 = this;\n      axios.get(API_BASE_URL + \"/api/deliveries\").then(function (response) {\n        return _this3.deliveriesData = response.data;\n      }).then(function () {\n        _this3.formData.deliveryTypeId = _this3.deliveriesData[0].id;\n      }).then(function () {\n        _this3.loadPayments(_this3.formData.deliveryTypeId);\n      });\n    },\n    loadPayments: function loadPayments(value) {\n      var _this4 = this;\n      axios.get(API_BASE_URL + \"/api/payments\", {\n        params: {\n          deliveryTypeId: value\n        }\n      }).then(function (response) {\n        return _this4.paymentsData = response.data;\n      }).then(function () {\n        _this4.formData.paymentTypeId = _this4.paymentsData[0].id;\n      });\n    }\n  }),\n  created: function created() {\n    this.loadDeliveries();\n  },\n  watch: {\n    \"formData.deliveryTypeId\": function formDataDeliveryTypeId(val, oldVal) {\n      var _this5 = this;\n      if (oldVal === null) {\n        return;\n      }\n      axios.get(API_BASE_URL + \"/api/payments\", {\n        params: {\n          deliveryTypeId: this.formData.deliveryTypeId\n        }\n      }).then(function (response) {\n        _this5.paymentsData = response.data;\n      }).then(function () {\n        _this5.formData.paymentTypeId = _this5.paymentsData[0].id;\n      });\n    },\n    deliveryPrice: function deliveryPrice() {\n      this.$store.commit(\"updateDeliveryPrice\", Number(this.deliveryPrice));\n    }\n  }\n};","map":{"version":3,"names":["numberFormat","BaseFormText","BaseFormTextaera","mapGetters","mapMutations","axios","API_BASE_URL","components","data","formData","deliveryTypeId","paymentTypeId","formError","formErrorMessage","productsLoading","deliveriesData","paymentsData","filters","computed","_objectSpread","products","totalPrice","deliveryPrice","_this","find","item","id","price","methods","order","_this2","clearTimeout","loadProductsTimer","setTimeout","post","params","userAccessKey","$store","state","then","response","commit","$router","push","name","error","request","message","loadDeliveries","_this3","get","loadPayments","value","_this4","created","watch","formDataDeliveryTypeId","val","oldVal","_this5","Number"],"sources":["src/pages/OrderPage.vue"],"sourcesContent":["<template>\n    <main class=\"content container\">\n        <div class=\"content__top\">\n            <ul class=\"breadcrumbs\">\n                <li class=\"breadcrumbs__item\">\n                    <router-link class=\"breadcrumbs__link\" :to=\"{ name: 'main' }\">\n                        Каталог\n                    </router-link>\n                </li>\n                <li class=\"breadcrumbs__item\">\n                    <router-link class=\"breadcrumbs__link\" :to=\"{ name: 'cart' }\">\n                        Корзина\n                    </router-link>\n                </li>\n                <li class=\"breadcrumbs__item\">\n                    <a class=\"breadcrumbs__link\">\n                        Оформление заказа\n                    </a>\n                </li>\n            </ul>\n\n            <h1 class=\"content__title\">\n                Корзина\n            </h1>\n            <span class=\"content__info\">\n                {{ products.length }} товар(а)\n            </span>\n        </div>\n\n        <section class=\"cart\">\n            <div v-if=\"productsLoading\" style=\"font-size: 25px; text-align: center; margin-bottom: 50px;\"><img\n                    src=\"../1488.gif\" style=\"vertical-align: middle; padding-right: 5px\">Идёт отправка формы...</div>\n            <form class=\"cart__form form\" action=\"#\" method=\"POST\" @submit.prevent=\"order\">\n                <div class=\"cart__field\">\n                    <div class=\"cart__data\">\n                        <BaseFormText v-model=\"formData.name\" title=\"ФИО\" placeholder=\"Введите ваше полное имя\"\n                            :error=\"formError.name\"></BaseFormText>\n\n                        <BaseFormText v-model=\"formData.address\" title=\"Адрес доставки\" placeholder=\"Введите ваш адрес\"\n                            :error=\"formError.address\"></BaseFormText>\n\n                        <BaseFormText v-model=\"formData.phone\" title=\"Телефон\" placeholder=\"Введите ваш телефон\"\n                            :error=\"formError.phone\" type=\"tel\"></BaseFormText>\n\n                        <BaseFormText v-model=\"formData.email\" title=\"Email\" placeholder=\"Введи ваш Email\"\n                            :error=\"formError.email\"></BaseFormText>\n\n                        <BaseFormTextaera title=\"Комментарий к заказу\" v-model=\"formData.comment\" :error=\"formError.comment\"\n                            placeholder=\"Ваши пожелания\"></BaseFormTextaera>\n                    </div>\n\n                    <div class=\"cart__options\">\n                        <h3 class=\"cart__title\">Доставка</h3>\n                        <ul class=\"cart__options options\">\n                            <li class=\"options__item\" v-for=\"item in deliveriesData\" :key=\"item.id\">\n                                <label class=\"options__label\">\n                                    <input class=\"options__radio sr-only\" type=\"radio\" name=\"delivery\" :value=\"item.id\"\n                                        v-model=\"formData.deliveryTypeId\">\n                                    <span class=\"options__value\">\n                                        {{ item.title }}\n                                        <b>{{ item.price == 0 ? \"бесплатно\" : item.price }}\n                                            <span  v-if=\"item.price > 0\">i</span>\n                                        </b>\n                                    </span>\n                                </label>\n                            </li>\n                        </ul>\n\n                        <h3 class=\"cart__title\">Оплата</h3>\n                        <ul class=\"cart__options options\">\n                            <li class=\"options__item\" v-for=\"item in paymentsData\" :key=\"item.id\">\n                                <label class=\"options__label\">\n                                    <input class=\"options__radio sr-only\" type=\"radio\" name=\"pay\" :value=\"item.id\"\n                                        v-model=\"formData.paymentTypeId\">\n                                    <span class=\"options__value\">\n                                        {{ item.title }}\n                                    </span>\n                                </label>\n                            </li>\n                        </ul>\n                    </div>\n                </div>\n\n                <div class=\"cart__block\">\n                    <ul class=\"cart__orders\">\n                        <li class=\"cart__order\" v-for=\"item in products\"> <!--:key=\"item.productId\" :item=\"item\"-->\n                            <h3> {{ item.product.productOffer.title }}</h3>\n                            <b>{{ (item.quantity * item.product.price) | numberFormat }} ₽</b>\n                            <span>Количество: {{ item.quantity }}</span>\n                            <span>Артикул: {{ item.product.productOffer.id }}</span>\n                        </li>\n                    </ul>\n\n                    <div class=\"cart__total\">\n                        <p>Доставка: <b>{{ deliveryPrice }} ₽</b></p>\n                        <p>Итого: <b>{{ products.length }}</b> товар(а) на сумму <b>{{ (totalPrice + deliveryPrice) |\n                            numberFormat }} ₽</b>\n                        </p>\n                    </div>\n\n                    <button class=\"cart__button button button--primery\" type=\"submit\">\n                        Оформить заказ\n                    </button>\n                </div>\n                <div class=\"cart__error form__error-block\" v-if=\"formErrorMessage\">\n                    <h4>Заявка не отправлена!</h4>\n                    <p>\n                        {{ formErrorMessage }}\n                    </p>\n                </div>\n            </form>\n        </section>\n    </main>\n</template>\n\n<script>\nimport numberFormat from '@/helpers/numberFormat';\nimport BaseFormText from '@/components/BaseFormText.vue';\nimport BaseFormTextaera from '@/components/BaseFormTextaera.vue';\nimport { mapGetters, mapMutations } from 'vuex';\nimport axios from 'axios';\nimport { API_BASE_URL } from '@/config';\n\nexport default {\n    components: { BaseFormText, BaseFormTextaera },\n    data() {\n        return {\n            formData: {\n                deliveryTypeId: null,\n                paymentTypeId: null\n            },\n            formError: {},\n            formErrorMessage: '',\n            productsLoading: false,\n            deliveriesData: [],\n            paymentsData: []\n        }\n    },\n    filters: {\n        numberFormat\n    },\n    computed: {\n        ...mapGetters({ products: 'cartDetailProducts', totalPrice: 'cartTotalPrice' }),\n        deliveryPrice() {\n            return this.formData.deliveryTypeId\n                ? +this.deliveriesData.find(item => item.id === this.formData.deliveryTypeId).price\n                : 0;\n        }\n    },\n    methods: {\n        ...mapMutations([\"updateDeliveryPrice\"]),\n        order() {\n            this.formError = {};\n            this.formErrorMessage = '';\n            this.productsLoading = true;\n\n            clearTimeout(this.loadProductsTimer);\n            this.loadProductsTimer = setTimeout(() => {\n                axios.post(API_BASE_URL + '/api/orders', {\n                    ...this.formData\n                }, {\n                    params: {\n                        userAccessKey: this.$store.state.userAccessKey\n                    }\n                })\n                    .then(response => {\n                        this.$store.commit('resetCart');\n                        this.$store.commit('updateOrderInfo', response.data);\n                        this.$router.push({ name: 'orderInfo', params: { id: response.data.id } });\n                    })\n                    .catch(error => {\n                        this.formError = error.response.data.error.request || {};\n                        this.formErrorMessage = error.response.data.error.message;\n                    })\n                    .then(() => this.productsLoading = false)\n            }, 1000);\n        },\n        loadDeliveries() {\n            axios\n                .get(API_BASE_URL + \"/api/deliveries\")\n                .then(response => (this.deliveriesData = response.data))\n                .then(() => {\n                    this.formData.deliveryTypeId = this.deliveriesData[0].id;\n                })\n                .then(() => {\n                    this.loadPayments(this.formData.deliveryTypeId);\n                });\n        },\n        loadPayments(value) {\n            axios\n                .get(API_BASE_URL + \"/api/payments\", {\n                    params: {\n                        deliveryTypeId: value\n                    }\n                })\n                .then(response => (this.paymentsData = response.data))\n                .then(() => {\n                    this.formData.paymentTypeId = this.paymentsData[0].id;\n                });\n        }\n    },\n    created() {\n        this.loadDeliveries();\n    },\n    watch: {\n        \"formData.deliveryTypeId\": function (val, oldVal) {\n            if (oldVal === null) {\n                return;\n            }\n            axios\n                .get(API_BASE_URL + \"/api/payments\", {\n                    params: {\n                        deliveryTypeId: this.formData.deliveryTypeId\n                    }\n                })\n                .then(response => {\n                    this.paymentsData = response.data;\n                })\n                .then(() => {\n                    this.formData.paymentTypeId = this.paymentsData[0].id;\n                });\n        },\n        deliveryPrice() {\n            this.$store.commit(\"updateDeliveryPrice\", Number(this.deliveryPrice));\n        }\n    }\n}\n</script>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}