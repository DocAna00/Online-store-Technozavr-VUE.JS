{"ast":null,"code":"// import Vue from \"vue\";\n// import Vuex from 'vuex';\n// import axios from 'axios';\n// import { API_BASE_URL } from '@/config';\n\n// Vue.use(Vuex);\n\n// export default new Vuex.Store({\n//     state: {\n//         cartProducts: [],\n//         userAccessKey: null,\n//         cartProductsData: [],\n//         orderInfo: null,\n//         deliveryPrice: 0\n//     },\n//     mutations: {\n//         updateOrderInfo(state, orderInfo) {\n//             state.orderInfo = orderInfo;\n//         },\n//         resetCart(state) {\n//             state.cartProducts = [];\n//             state.cartProductsData = [];\n//         },\n//         updateCartProductAmount(state, { productId, amount }) {\n//             const item = state.cartProducts.find(item => item.productId === productId);\n\n//             if (item) {\n//                 item.amount = amount;\n//             }\n//         },\n//         deleteCartProduct(state, productId) {\n//             state.cartProducts = state.cartProducts.filter(item => item.productId !== productId);\n//         },\n//         updateUserAccessKey(state, accessKey) {\n//             state.userAccessKey = accessKey;\n//         },\n//         updateCartProductsData(state, items) {\n//             state.cartProductsData = items;\n//         },\n//         updateDeliveryPrice(state, price) {\n//             state.deliveryPrice = price;\n//         },\n//         syncCartProducts(state) {\n//             state.cartProducts = state.cartProductsData.map(item => {\n//                 return {\n//                     productId: item.id,\n//                     color: item.color.id,\n//                     amount: item.quantity\n//                 }\n//             });\n//         }\n//     },\n//     getters: {\n//         cartDetailProducts(state) {\n//             return state.cartProducts.map(item => {\n//                 const product = state.cartProductsData.find(p => p.id === item.productId);\n//                 return {\n//                     ...item,\n//                     product: {\n//                         ...product,\n//                         image: product.productOffer.product.preview.file.url\n//                     }\n//                 }\n//             });\n//         },\n//         cartTotalPrice(state, getters) {\n//             return getters.cartDetailProducts.reduce((acc, item) => (item.product.price * item.amount) + acc, 0);\n//         },\n//         cartTotalPosition(state) {\n//             return state.cartProducts.length;\n//         },\n//         orderInfo(state) {\n//             return state.orderInfo;\n//         },\n//         orderInfoItems(state) {\n//             if (state.orderInfo) {\n//                 return state.orderInfo.basket.items;\n//             }\n//         }\n//     },\n//     actions: {\n//         loadOrderInfo(context, orderId) {\n//             return axios.get(API_BASE_URL + '/api/orders/' + orderId, {\n//                 params: {\n//                     userAccessKey: context.state.userAccessKey\n//                 }\n//             })\n//                 .then(response => {\n//                     context.commit('updateOrderInfo', response.data);\n//                 });\n//         },\n//         loadCart(context) {\n//             return axios.get(API_BASE_URL + '/api/baskets', {\n//                 params: {\n//                     userAccessKey: context.state.userAccessKey\n//                 }\n//             })\n//                 .then(response => {\n//                     if (!context.state.userAccessKey) {\n//                         localStorage.setItem('userAccessKey', response.data.user.accessKey);\n//                         context.commit('updateUserAccessKey', response.data.user.accessKey);\n//                     }\n//                     context.commit('updateCartProductsData', response.data.items);\n//                     context.commit('syncCartProducts');\n//                 })\n//         },\n//         addProductToCart(context, { productId, amount }) {\n//             return (new Promise(resolve => setTimeout(resolve, 300)))\n//                 .then(() => {\n//                     return axios.post(API_BASE_URL + '/api/baskets/products', {\n//                         productOfferId: productId,\n//                         quantity: amount\n//                     }, {\n//                         params: {\n//                             userAccessKey: context.state.userAccessKey\n//                         }\n//                     })\n//                         .then(response => {\n//                             context.commit('updateCartProductsData', response.data.items);\n//                             context.commit('syncCartProducts');\n//                         })\n//                 })\n//         },\n//         updateCartProductAmount(context, { productId, colorId, amount }) {\n//             context.commit('updateCartProductAmount', { productId, amount });\n\n//             if (amount < 1) {\n//                 return;\n//             }\n\n//             return axios.put(API_BASE_URL + '/api/baskets/products', {\n//                 basketItemId: productId,\n//                 colorId: colorId,\n//                 quantity: amount\n//             }, {\n//                 params: {\n//                     userAccessKey: context.state.userAccessKey\n//                 }\n//             })\n//                 .then(response => {\n//                     context.commit('updateCartProductsData', response.data.items);\n//                 })\n//                 .catch(() => {\n//                     context.commit('syncCartProducts');\n//                 })\n//         },\n//         deleteProductFromCart(context, productId) {\n//             return axios.delete(API_BASE_URL + '/api/baskets/products', {\n//                 data: { productId },\n//                 params: {\n//                     userAccessKey: context.state.userAccessKey\n//                 }\n//             })\n//                 .then(response => {\n//                     context.commit('updateCartProductsData', response.data.items);\n//                     context.commit('syncCartProducts');\n//                 })\n//         }\n//     }\n// });","map":{"version":3,"names":[],"sources":["/Users/anadoc/Desktop/Skillbox Anastasia/Skillbox Projects/vue-final-project/final_project_vue.js/project/src/store/index.js"],"sourcesContent":["// import Vue from \"vue\";\n// import Vuex from 'vuex';\n// import axios from 'axios';\n// import { API_BASE_URL } from '@/config';\n\n// Vue.use(Vuex);\n\n// export default new Vuex.Store({\n//     state: {\n//         cartProducts: [],\n//         userAccessKey: null,\n//         cartProductsData: [],\n//         orderInfo: null,\n//         deliveryPrice: 0\n//     },\n//     mutations: {\n//         updateOrderInfo(state, orderInfo) {\n//             state.orderInfo = orderInfo;\n//         },\n//         resetCart(state) {\n//             state.cartProducts = [];\n//             state.cartProductsData = [];\n//         },\n//         updateCartProductAmount(state, { productId, amount }) {\n//             const item = state.cartProducts.find(item => item.productId === productId);\n\n//             if (item) {\n//                 item.amount = amount;\n//             }\n//         },\n//         deleteCartProduct(state, productId) {\n//             state.cartProducts = state.cartProducts.filter(item => item.productId !== productId);\n//         },\n//         updateUserAccessKey(state, accessKey) {\n//             state.userAccessKey = accessKey;\n//         },\n//         updateCartProductsData(state, items) {\n//             state.cartProductsData = items;\n//         },\n//         updateDeliveryPrice(state, price) {\n//             state.deliveryPrice = price;\n//         },\n//         syncCartProducts(state) {\n//             state.cartProducts = state.cartProductsData.map(item => {\n//                 return {\n//                     productId: item.id,\n//                     color: item.color.id,\n//                     amount: item.quantity\n//                 }\n//             });\n//         }\n//     },\n//     getters: {\n//         cartDetailProducts(state) {\n//             return state.cartProducts.map(item => {\n//                 const product = state.cartProductsData.find(p => p.id === item.productId);\n//                 return {\n//                     ...item,\n//                     product: {\n//                         ...product,\n//                         image: product.productOffer.product.preview.file.url\n//                     }\n//                 }\n//             });\n//         },\n//         cartTotalPrice(state, getters) {\n//             return getters.cartDetailProducts.reduce((acc, item) => (item.product.price * item.amount) + acc, 0);\n//         },\n//         cartTotalPosition(state) {\n//             return state.cartProducts.length;\n//         },\n//         orderInfo(state) {\n//             return state.orderInfo;\n//         },\n//         orderInfoItems(state) {\n//             if (state.orderInfo) {\n//                 return state.orderInfo.basket.items;\n//             }\n//         }\n//     },\n//     actions: {\n//         loadOrderInfo(context, orderId) {\n//             return axios.get(API_BASE_URL + '/api/orders/' + orderId, {\n//                 params: {\n//                     userAccessKey: context.state.userAccessKey\n//                 }\n//             })\n//                 .then(response => {\n//                     context.commit('updateOrderInfo', response.data);\n//                 });\n//         },\n//         loadCart(context) {\n//             return axios.get(API_BASE_URL + '/api/baskets', {\n//                 params: {\n//                     userAccessKey: context.state.userAccessKey\n//                 }\n//             })\n//                 .then(response => {\n//                     if (!context.state.userAccessKey) {\n//                         localStorage.setItem('userAccessKey', response.data.user.accessKey);\n//                         context.commit('updateUserAccessKey', response.data.user.accessKey);\n//                     }\n//                     context.commit('updateCartProductsData', response.data.items);\n//                     context.commit('syncCartProducts');\n//                 })\n//         },\n//         addProductToCart(context, { productId, amount }) {\n//             return (new Promise(resolve => setTimeout(resolve, 300)))\n//                 .then(() => {\n//                     return axios.post(API_BASE_URL + '/api/baskets/products', {\n//                         productOfferId: productId,\n//                         quantity: amount\n//                     }, {\n//                         params: {\n//                             userAccessKey: context.state.userAccessKey\n//                         }\n//                     })\n//                         .then(response => {\n//                             context.commit('updateCartProductsData', response.data.items);\n//                             context.commit('syncCartProducts');\n//                         })\n//                 })\n//         },\n//         updateCartProductAmount(context, { productId, colorId, amount }) {\n//             context.commit('updateCartProductAmount', { productId, amount });\n\n//             if (amount < 1) {\n//                 return;\n//             }\n\n//             return axios.put(API_BASE_URL + '/api/baskets/products', {\n//                 basketItemId: productId,\n//                 colorId: colorId,\n//                 quantity: amount\n//             }, {\n//                 params: {\n//                     userAccessKey: context.state.userAccessKey\n//                 }\n//             })\n//                 .then(response => {\n//                     context.commit('updateCartProductsData', response.data.items);\n//                 })\n//                 .catch(() => {\n//                     context.commit('syncCartProducts');\n//                 })\n//         },\n//         deleteProductFromCart(context, productId) {\n//             return axios.delete(API_BASE_URL + '/api/baskets/products', {\n//                 data: { productId },\n//                 params: {\n//                     userAccessKey: context.state.userAccessKey\n//                 }\n//             })\n//                 .then(response => {\n//                     context.commit('updateCartProductsData', response.data.items);\n//                     context.commit('syncCartProducts');\n//                 })\n//         }\n//     }\n// });"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"script","externalDependencies":[]}